API موجود بازی Mastermind یک ساختار ساده دارد که برای مدیریت بازی و ثبت حدس‌ها قابل استفاده است. نکات مثبت این API شامل استفاده از روش‌های معمول HTTP می‌شود (POST برای ساختن و حدس زدن و DELETE برای پاک کردن)، جواب‌های JSON که ساختار مشخصی دارند، و همچنین مدیریت خطا با کدهای وضعیت HTTP که استاندارد هستند (مثل 200, 204, 400, 404, 500) و یک شیء ErrorResponse. این سادگی باعث می‌شود که پیاده‌سازی کلاینت راحت‌تر باشد. ولی API در قسمت ارائه اطلاعات وضعیت بازی کمبود دارد؛ هیچ endpoint ای برای گرفتن وضعیت جاری یک بازی (مثل تعداد تلاش‌هایی که انجام شده یا اینکه بازی تموم شده یا نه) وجود ندارد. یک مشکل دیگه هم اینست که game_id در بدنه درخواست برای حدس زدن (/guess) فرستاده می‌شود به جای اینکه به عنوان پارامتر مسیر استفاده شود، که این کار زیاد با اصول RESTful همخوانی ندارد.

برای بهتر کردن API فعلی، اولین پیشنهاد تغییر endpoint مربوط به POST /guess است. بهتر است که game_id را به صورت پارامتر مسیر در نظر بگیریم، مثلاً POST /game/{gameID}/guess. این تغییر باعث می‌شود API بیشتر با اصول RESTful سازگار باشد، چون حدس زدن را می‌توان به عنوان یک عمل روی منبع بازی خاص ببینیم. علاوه بر این، اضافه کردن یک endpoint مثل GET /game/{gameID} برای گرفتن وضعیت جاری بازی (شامل تعداد حدس‌ها، وضعیت بازی مثل "در حال انجام"، "برد" یا "باخت") خیلی مفید خواهد بود. این قابلیت به کلاینت‌ها اجازه می‌دهد که پیشرفت بازی را دنبال کنند و یک رابط کاربری پویاتر ارائه دهند. همچنین، اضافه کردن پارامترهایی به درخواست POST /game برای تنظیمات بازی (مثل طول کد، بازه اعداد یا حداکثر تعداد تلاش‌ها) می‌تواند انعطاف‌پذیری API را بیشتر کند.

اگر قرار بود این API را از صفر طراحی کنم، تمرکز اصلی روی طراحی کاملاً مبتنی بر منابع با استفاده از /games به عنوان منبع اصلی می‌بود. این شامل POST /games برای ساختن بازی جدید و گرفتن game_id و وضعیت اولیه، GET /games/{game_id} برای گرفتن وضعیت کامل بازی (شامل وضعیت جاری، تعداد تلاش‌ها و در صورت تموم شدن بازی، کد مخفی)، POST /games/{game_id}/guesses برای فرستادن حدس‌ها (که حدس در بدنه درخواست قرار می‌گیرد) و DELETE /games/{game_id} برای تموم کردن بازی می‌شود. این روش باعث بهتر شدن سازگاری و قابلیت پیش‌بینی API می‌شود. همچنین، از همان ابتدا، پیاده‌سازی versioning برای API (مثلاً /v1/games) و در نظر گرفتن احراز هویت (مثل API key ها) برای امنیت بیشتر، از مواردی است که در طراحی جدید باید لحاظ می‌شد.